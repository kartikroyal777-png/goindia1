/*
  # [Create Notifications Table]
  [This operation creates a new table to store push notifications sent from the admin panel.]

  ## Query Description: [This script creates the `notifications` table. It's a non-destructive operation and is safe to run on existing databases. It is required for the Notification Manager in the admin panel to function correctly.]
  
  ## Metadata:
  - Schema-Category: ["Structural"]
  - Impact-Level: ["Low"]
  - Requires-Backup: [false]
  - Reversible: [true]
  
  ## Structure Details:
  - Table: `public.notifications`
  - Columns: `id`, `created_at`, `title`, `message`, `type`
  
  ## Security Implications:
  - RLS Status: [Enabled]
  - Policy Changes: [Yes]
  - Auth Requirements: [Admin-only write access]
  
  ## Performance Impact:
  - Indexes: [Primary Key on `id`]
  - Triggers: [None]
  - Estimated Impact: [Low]
*/
create table if not exists public.notifications (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  title text not null,
  message text not null,
  type text not null default 'info'::text
);

/*
  # [Create Admin Check Function]
  [This operation creates a reusable SQL function to identify the admin user based on their email address.]

  ## Query Description: [This script creates a security function `is_admin()`. This function is used in Row Level Security policies to grant special privileges to the admin account. It is non-destructive and essential for securing admin-only actions.]
  
  ## Metadata:
  - Schema-Category: ["Security"]
  - Impact-Level: ["Low"]
  - Requires-Backup: [false]
  - Reversible: [true]
  
  ## Structure Details:
  - Function: `public.is_admin()`
  
  ## Security Implications:
  - RLS Status: [N/A]
  - Policy Changes: [No, this is a helper function for policies]
  - Auth Requirements: [Used to check authenticated user's email]
  
  ## Performance Impact:
  - Indexes: [N/A]
  - Triggers: [N/A]
  - Estimated Impact: [Low]
*/
create or replace function public.is_admin()
returns boolean
language sql
security definer
set search_path = public
as $$
  select auth.email() = 'kartikroyal777@gmail.com';
$$;

/*
  # [Setup Admin RLS Policies]
  [This operation enables Row Level Security (RLS) on content tables and creates policies to allow public read access while giving the admin full control (create, read, update, delete).]

  ## Query Description: [This script enables RLS and applies policies to the `cities`, `tehsils`, `locations`, `phrases`, and `notifications` tables. This is a critical security update. It fixes the "violates row-level security" error by explicitly granting the admin user full permissions, while ensuring regular users can still view the content.]
  
  ## Metadata:
  - Schema-Category: ["Security", "Dangerous"]
  - Impact-Level: ["High"]
  - Requires-Backup: [true]
  - Reversible: [true]
  
  ## Structure Details:
  - Tables Affected: `cities`, `tehsils`, `locations`, `phrases`, `notifications`
  
  ## Security Implications:
  - RLS Status: [Enabled]
  - Policy Changes: [Yes, new policies for admin and public access are created.]
  - Auth Requirements: [Differentiates between admin, authenticated users, and anonymous users.]
  
  ## Performance Impact:
  - Indexes: [None]
  - Triggers: [None]
  - Estimated Impact: [Low. RLS checks add minimal overhead.]
*/
-- Enable RLS on all managed tables
alter table public.cities enable row level security;
alter table public.tehsils enable row level security;
alter table public.locations enable row level security;
alter table public.phrases enable row level security;
alter table public.notifications enable row level security;

-- Drop existing policies to prevent conflicts and ensure a clean slate
drop policy if exists "Allow public read access" on public.cities;
drop policy if exists "Allow admin full access" on public.cities;
drop policy if exists "Allow public read access" on public.tehsils;
drop policy if exists "Allow admin full access" on public.tehsils;
drop policy if exists "Allow public read access" on public.locations;
drop policy if exists "Allow admin full access" on public.locations;
drop policy if exists "Allow public read access" on public.phrases;
drop policy if exists "Allow admin full access" on public.phrases;
drop policy if exists "Allow public read access" on public.notifications;
drop policy if exists "Allow admin full access" on public.notifications;

-- Create Policies for CITIES
create policy "Allow public read access" on public.cities for select using (true);
create policy "Allow admin full access" on public.cities for all using (public.is_admin()) with check (public.is_admin());

-- Create Policies for TEHSILS
create policy "Allow public read access" on public.tehsils for select using (true);
create policy "Allow admin full access" on public.tehsils for all using (public.is_admin()) with check (public.is_admin());

-- Create Policies for LOCATIONS
create policy "Allow public read access" on public.locations for select using (true);
create policy "Allow admin full access" on public.locations for all using (public.is_admin()) with check (public.is_admin());

-- Create Policies for PHRASES
create policy "Allow public read access" on public.phrases for select using (true);
create policy "Allow admin full access" on public.phrases for all using (public.is_admin()) with check (public.is_admin());

-- Create Policies for NOTIFICATIONS
create policy "Allow public read access" on public.notifications for select using (true);
create policy "Allow admin full access" on public.notifications for all using (public.is_admin()) with check (public.is_admin());
