const GROQ_API_KEY = import.meta.env.VITE_GROQ_API_KEY;
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";

const handleApiError = (error: any): string => {
  console.error("Error calling Groq API:", error);
  
  if (!GROQ_API_KEY || GROQ_API_KEY === 'YOUR_API_KEY') {
    return `The VITE_GROQ_API_KEY is missing or invalid. Please ensure it's set in your .env file.`;
  }

  return `Sorry, an unexpected error occurred with the AI assistant. Please try again later. (Details: ${error.message || 'Unknown error'})`;
};

const cleanJsonString = (rawText: string): string => {
  let cleanedText = rawText.trim();
  
  const jsonMatch = cleanedText.match(/```json\s*([\s\S]*?)\s*```/);
  if (jsonMatch && jsonMatch[1]) {
    cleanedText = jsonMatch[1];
  }

  const firstBracket = cleanedText.indexOf('{');
  const firstSquareBracket = cleanedText.indexOf('[');
  let start = -1;

  if (firstBracket === -1 && firstSquareBracket === -1) return cleanedText;
  if (firstBracket === -1) start = firstSquareBracket;
  else if (firstSquareBracket === -1) start = firstBracket;
  else start = Math.min(firstBracket, firstSquareBracket);

  const lastBracket = cleanedText.lastIndexOf('}');
  const lastSquareBracket = cleanedText.lastIndexOf(']');
  let end = Math.max(lastBracket, lastSquareBracket);

  if (start === -1 || end === -1) return cleanedText;

  return cleanedText.substring(start, end + 1);
};


export const runGroqQuery = async (prompt: string): Promise<string> => {
  if (!GROQ_API_KEY || GROQ_API_KEY === 'YOUR_API_KEY') {
    throw new Error(handleApiError({ message: 'Groq API key not configured or is invalid.' }));
  }

  try {
    const response = await fetch(GROQ_API_URL, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${GROQ_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            messages: [{ role: 'user', content: prompt }],
            model: 'llama-3.1-8b-instant'
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || 'Failed to fetch from Groq API');
    }

    const data = await response.json();
    const text = data.choices[0]?.message?.content || '';
    return cleanJsonString(text);

  } catch (error: any) {
    throw new Error(handleApiError(error));
  }
};
